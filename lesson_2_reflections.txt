When you initialize a repository, a new directory called .git (which is
normally invisible to file explorers and can only be seen through the
command line using ls -a) is created, which keeps track of metadata
associated with all the files in that directory that records their
versioning history.

This allows you to begin working with the files in the directory within
Git and employing the version control workflows that it makes possible.


***

A staging area is different from both a working directory and a
repository. It represents an intermediate stage between the two. When you
make a new repository, before you commit some files from a working
directory into it, you first bring the files individually into the
staging area.

This allows you fine control over exactly which files are going to go
into a given commit. Without the staging area, making a commit would roll
up all the files in your working directory into the commit, which is very
often not the ideal situation, as commits should be more or less
correlated with specific logical changes.


***

You can use the staging area to make sure you have one commit per
logical change because using "git add" to move changes into the staging
area introduces an additional step that provides an opportunity to
reflect on whether your changes are commit-appropriate. 

You can use "git diff --staged" to compare what is in the staging area to
what's in your latest commit to make completely sure that what you're
about to commit makes sense. 

Similarly, you can use "git diff" w/o arguments to compare changes
you've made in your working directory w/ what is in the staging area
(which will be whatever you committed last time), for the same kind of
reason.


***

Branches would be helpful in keeping your history organized anytime you
decided to depart from the "master" branch to attempt an experimental
feature that you weren't sure would be desirable or would work well w/
the rest of the codebase. This would cause your history to be organized
in a way that would reflect a distinction b/w the "main" codebase, which
would define key basic features, and supplementary add-ons which may or
may not prove to be necessary.

Branches would also allow you to strike out on your own path with
developing a given codebase, while another developer goes on their own
path, or continues development on the master branch. Later, you could
merge your changes, and if the merge doesn't work out, you could just
roll back to the previous commit (on both branches?) just before the
merge. This allows for independent collaboration!



***

Diagrams help you visualize branch structure by allowing you to quickly
grasp things like:

-which commits are at the tip of each branch

-where your currently checked-out commit (HEAD) is in relation to the
	whole commit history

-where you might be in danger of creating an unreachable commit b/c you
	are in a detached HEAD state ... i.e. you might make a commit that
	is not part of any branch, and if you want to keep it, you would
	need to explicitly create a new branch at that point using
	"git checkout -b" or "git branch new_branch_name" +
	"git checkout new_branch_name"

-which commits have which parents ... & thus, which commits are reachable
	by "git log" & which are not

-how your branches may not contain all the latest commits in the master
	branch, b/c development of the master branch has moved on since the
	creation of the other branches


***

Merging 2 branches together causes the branch specified as the argument
to "git merge [branch_to_merge]" to get merged into the branch that is
currently checked out. So, really it's more like merging that branch INTO
the branch you're on at the moment.

This causes the creation of a new commit that is part of the branch that
was merged INTO. This commit contains all the changes made in the merged-
into branch ("master") & the branch that was merged into it.

At this point, the branch that was merged into master can be deleted
using "git branch -d [branch_to_delete]". Deleting a branch actually just
deletes the LABEL for that branch -- the commits will still be there in
the history (until garbage collection occurs), there is just no way for
you to find them & get to them via "git log", b/c they would be
unreachable (in Git terms, this means "git log" will not see them, b/c
"git log" only sees commits by looking at HEAD, then finding its parent,
then finding the parent of that, & so on -- when you get to a commit that
is at a point where a branch was formed, that branch's first commit will
be its child, not its parent, so it won't be visible to "git log"). The
branch LABEL is the way to reach these (using "git checkout [branch]"),
& when you delete this label (which we only CALL "deleting the branch"),
then they become truly unreachable -- except if you know their IDs &
garbage collection has not yet occurred.

We represent a merge in a diagram as a new commit -- b/c it is -- that
has 2 parents, the commit at the tip of the master branch before the
merge & the commit at the tip of the branch-to-be-merged-into-master
before the merge.


***

Here are some pros & cons of Git's automatic merging vs. always doing
merges manually.

Pros:
1. It saves you some really tedious & error-prone copying & pasting
to consolidate various files.

2. It saves you having to worry about identifying all the files that
need to be merged, because it can automatically see which ones have
actually been modified.

3. It automatically notes in the "git log" history & in the commit
message that a merge between 2 branches has occurred, so this potentially
important fact about your versioniong/development history is not lost.


Cons:
1. It detects merge conflicts in a rudimentary way that may frequently
warn you about differences in the branches you're merging which are not
truly "conflicts" -- no functionality would break, it is just that Git
has detected that similar parts of the same file were altered
differently w/in each branch.

2. Git does not actually have any way of knowing whether the branches
you are merging are compatible or not, so it is possible for an automatic
merge to create broken code.

3. Doing manual merges probably gives you a better understanding of the
code base & a better sense of what the developers you're collaborating
with are doing, which could prevent errors later on.